TODO:
    Frontend
        Make three public pages:
            "/" root page with two buttons, Login and Register
            "/login" login with existing account.  A successful login will redirect to dashboard
            "/register" register new user (automatically has Instructor role)
        Dashboard - only logged in users "/users/{id}/dashboard" (/users/{id} is simply a detail page for the user)
            /admin/users - will let admins access users
            /students/ - admins and instructors can access students
            nav bar with logout on top right
            have vuejs router swap between pages for everything below navbar
                Account (main dashboard page)
                Students (list all students)
                Sessions (list all sessions with current teacher)
                Users (for admins only.  List all registered users)

    Backend
        Consider just doing sessions - read this for argument why sessions are better for most cases (unless very big)
            http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/
        AmigosCode override userDetailsService() in SecurityConfig
            and added an admin user there then return a new
            UserDetailsService with the added user(s)

            made two enums:
                ApplicationUserPermission (eg, read:student, write:course, etc)
                ApplicationUserRole (each role has a hashset of permissions too)
            
        Add email as third field for registration
            If email is already used, should not allow that user to register
            This is the foundation before we add email verification (watch AmigosCode video to see how to send/receive tokens to emails)
        Add authorizations
            ROLE_ADMIN can access api/users and api/students (shows all registered users/students and permissions)
            ROLE_INSTRUCTOR can only access api/students

Backend
    https://www.toptal.com/spring/spring-security-tutorial (tutorial on Spring Security and JWT) - this one seems the best for now
    https://www.digitalocean.com/community/tutorials/vuejs-vue-jwt-patterns (saving jwt and setting it in header using Vuejs without Vuex)
    https://www.freecodecamp.org/news/how-to-setup-jwt-authorization-and-authentication-in-spring/ (JWT and Spring)
    Reread Marco Behler(?) guides on Spring Security and Spring in Action chapter on Spring Security
    Watch AmigosCode youtube video on Spring Boot, Spring Security and JWT (seems to implement at lower level than toptal article)

    Just add a new User programmatically in main() - we don't need a registration page yet since only admin can add User
        add "user", "password" in main() for now using RegistrationController

    Add authorizations for users (eg, permissions) 
        ADMIN, INSTRUCTOR, STUDENT

    Finish LessonController and test all Student/Instructor/Lesson rest endpoints

    Have each Student hold a foreign key to an Instructor

    Write a Session model and repository with two foreign keys for Student and Instructor
        insert a schema and fake data

    Add security
        'Spring Security and Angular' on Spring website
        'Spring Security Architecture' on Spring website
        Read this for example of login with spring and vuejs
            https://www.linkedin.com/pulse/implementing-authentication-authorization-vuejs-using-jadson-santos/?trk=public_profile_article_view
        three roles: 
            manager - can add or view anything (instructors, students, sessions)
            instructor (can add sessions and view their own students and sessions)
            parent (can view their student and their student's sessions)

Frontend
    Watch NetNinja Vue.js 3
    Watch NetNinja Vue.js 3 Typescript videos

    Make a registration page - will need to know how to use Vuejs Router for this

    Create a simple modal for updating and creating new users
        use NetNinja Vuejs3 video 5 for hints if I get stuck

    Dashboard
        top nav
            display current category on top left (Students, Instructors or Lessons)
            have profile button on right (for logging in / out)
        left nav (3 categories: Students, Instructors, Lessons)
            need to use Vuejs router to swap between three categories
        main top
            search bar (to search for students, etc)
            create (opens a modal to add student)
            export (creates excel or csv)
        main body
            list students/instructors/lessons (need a way to limit number from server side)
                id, name, edit (modal), show (modal)

    Login page
        Start with manager role.  All routes require login for now - need to configure backend
            and also make sure frontend works nicely with it

    Add a 'Add Student' button to post to api
    Add a 'Delete Student' column
    Add a 'Update Student' column

    How should students index page look?  List of all students and
        a button 'Add Student' to insert into database
        Make a form to add Students to the database
        Make a page to display all students
        Make a page to display one student


https://serene-springs-57533.herokuapp.com/

check this out for vuejs router
https://www.digitalocean.com/community/tutorials/how-to-navigate-between-views-with-vue-router

need to find out how to use axios to do http requests to backend api
look up a tutorial for it

